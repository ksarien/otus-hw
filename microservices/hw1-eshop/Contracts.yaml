openapi: 3.0.0
info:
  title: E-Shop API
  version: 1.0.0
paths:
  /auth/register:
    post:
      tags:
        - AuthService
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Invalid input
  /auth/login:
    post:
      tags:
        - AuthService
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User successfully authenticated
        '401':
          description: Unauthorized
  /auth/logout:
    post:
      tags:
        - AuthService
      summary: Logout user
      security:
        - JWTAuth: []
      responses:
        '200':
          description: User successfully logged out

  /users/profile:
    get:
      tags:
        - UserService
      summary: Get user profile
      security:
        - JWTAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    put:
      tags:
        - UserService
      summary: Update user profile
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Profile updated
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /catalog/products:
    get:
      tags:
        - CatalogService
      summary: Get product catalog
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search query to filter products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /catalog/products/{productId}:
    get:
      tags:
        - CatalogService
      summary: Get detailed information of a product
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: Unique identifier of the product
      responses:
        '200':
          description: Detailed product information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

  /cart:
    post:
      tags:
        - CartService
      summary: Add item to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Item added to cart
    get:
      tags:
        - CartService
      summary: Get cart items
      security:
        - JWTAuth: []
      responses:
        '200':
          description: List of items in cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '401':
          description: Unauthorized

  /cart/{itemId}:
    put:
      tags:
        - CartService
      summary: Update item in cart
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: Unique identifier of the cart item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Cart item updated
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
    delete:
      tags:
        - CartService
      summary: Delete item from cart
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: Unique identifier of the cart item
      responses:
        '200':
          description: Cart item deleted
        '401':
          description: Unauthorized

  /order:
    post:
      tags:
        - OrderService
      summary: Place an order
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order placed
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /orders:
    get:
      tags:
        - OrderService
      summary: Get user's order history
      security:
        - JWTAuth: []
      responses:
        '200':
          description: List of user's orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized

  /payment:
    post:
      tags:
        - PaymentService
      summary: Process payment
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          description: Payment successful
        '400':
          description: Payment failed

  /delivery:
    get:
      tags:
        - DeliveryService
      summary: Get delivery status
      security:
        - JWTAuth: []
      parameters:
        - in: query
          name: orderId
          required: true
          schema:
            type: integer
          description: Order identifier
      responses:
        '200':
          description: Delivery status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '404':
          description: Order not found

  /notifications:
    post:
      tags:
        - NotificationService
      summary: Send notification using template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Notification sent
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
    UserRegistration:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - firstName
        - lastName
        - email
        - password
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        address:
          type: string
      required:
        - firstName
        - lastName
        - phone
        - address
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        availableQuantity:
          type: integer
        price:
          type: number
      required:
        - id
        - name
        - price
    CartItem:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
      required:
        - productId
        - quantity
    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalAmount:
          type: number
        status:
          type: string
      required:
        - id
        - userId
        - items
        - totalAmount
        - status
    OrderRequest:
      type: object
      properties:
        cartId:
          type: integer
        paymentMethod:
          type: string
      required:
        - cartId
        - paymentMethod
    Payment:
      type: object
      properties:
        orderId:
          type: integer
        amount:
          type: number
      required:
        - orderId
        - amount
    Notification:
      type: object
      properties:
        userId:
          type: integer
        template:
          type: string
        params:
          type: object
          description: Key-value pairs for template substitution
          additionalProperties:
            type: string
      required:
        - userId
        - template
