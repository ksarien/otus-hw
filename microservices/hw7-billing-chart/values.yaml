# Default values for hw6-gateway-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


global:
  namespace: otus-billing

database:
  host: "otus-mysql.otus-billing.svc.cluster.local"
  port: "3306"

services:
  - name: authservice
    image: "ksarien/otus-gateway-auth-srv:1.1"
    replicas: 1
    port: 8080
    path: "/api/auth"
    runMigration: true
    runSeeder: false

  - name: userservice
    image: "ksarien/otus-gateway-user-srv:1.0"
    replicas: 1
    port: 8081
    path: "/api/user"
    runMigration: true
    runSeeder: false

  - name: orderservice
    image: "ksarien/otus-gateway-order-srv:1.0"
    replicas: 1
    port: 8082
    path: "/api/orders"
    runMigration: true
    runSeeder: false

  - name: billingservice
    image: "ksarien/otus-gateway-billing-srv:1.0"
    replicas: 1
    port: 8083
    path: "/api/billing"
    runMigration: true
    runSeeder: false

  - name: notificationservice
    image: "ksarien/otus-gateway-notification-srv:1.0"
    replicas: 1
    port: 8084
    path: "/api/notifications"
    runMigration: true
    runSeeder: true


authservice:
  env:
    DB_DATABASE: "auth_db"
    DB_USERNAME: "auth_user"
    DB_PASSWORD: "auth_password"
    USER_SERVICE_HOST: "http://userservice:8081"

userservice:
  env:
    DB_DATABASE: "user_db"
    DB_USERNAME: "user_user"
    DB_PASSWORD: "user_password"

orderservice:
  env:
    DB_DATABASE: "order_db"
    DB_USERNAME: "order_user"
    DB_PASSWORD: "order_password"
    BILLING_SERVICE_URL: "http://billingservice:8083"
    NOTIFICATION_SERVICE_URL: "http://notificationservice:8084"

billingservice:
  env:
    DB_DATABASE: "billing_db"
    DB_USERNAME: "billing_user"
    DB_PASSWORD: "billing_password"

notificationservice:
  env:
    DB_DATABASE: "notification_db"
    DB_USERNAME: "notification_user"
    DB_PASSWORD: "notification_password"
