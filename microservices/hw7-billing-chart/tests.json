{
    "info": {
        "_postman_id": "e2f53e8a-8f27-4e8e-9d4f-abcdef987654",
        "name": "Arch Homework API Tests",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://arch.homework"
        }
    ],
    "item": [
        {
            "name": "1. User Registration",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"username\": \"testuser_{{$randomInt}}\",\n  \"email\": \"testuser_{{$randomEmail}}\",\n  \"phone\": \"+{{$randomInt}}\",\n  \"password\": \"password123\",\n  \"repeat_password\": \"password123\"\n}"
                },
                "url": {
                    "raw": "{{baseUrl}}/api/auth/register",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "auth",
                        "register"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Проверяем, что статус ответа 201 OK",
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.expect(pm.response.code).to.eql(201);",
                            "});",
                            "",
                            "// Сохраняем email и password для логина (динамически, без предварительного задания в переменных коллекции)",
                            "var reqBody = JSON.parse(pm.request.body.raw);",
                            "pm.environment.set(\"user1_email\", reqBody.email);",
                            "pm.environment.set(\"user1_password\", reqBody.password);",
                            "",
                            "// Если в ответе есть user_id, сохраняем его, иначе используем email",
                            "var res = {};\ntry { res = pm.response.json(); } catch(e) { res = {}; }",
                            "if(res.user_id){",
                            "    pm.environment.set(\"user1_id\", res.user_id);",
                            "} else {",
                            "    pm.environment.set(\"user1_id\", reqBody.email);",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "2. User Login",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"{{user1_email}}\",\n  \"password\": \"{{user1_password}}\"\n}"
                },
                "url": {
                    "raw": "{{baseUrl}}/api/auth/login",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "auth",
                        "login"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Проверяем, что статус ответа 200 OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.eql(200);",
                            "});",
                            "",
                            "// Проверяем, что в ответе есть токен и сохраняем его",
                            "var res = {};\ntry { res = pm.response.json(); } catch(e) { res = {}; }",
                            "pm.test(\"Token is returned\", function () {",
                            "    pm.expect(res).to.have.property('token');",
                            "});",
                            "if(res.token){",
                            "    pm.environment.set(\"authToken\", res.token);",
                            "}",
                            "",
                            "// Если возвращается user_id, сохраняем его",
                            "if(res.user_id){",
                            "    pm.environment.set(\"user1_id\", res.user_id);",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "3. Get Billing Account (Check Status 200)",
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/api/billing/account",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "billing",
                        "account"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Проверяем, что статус ответа 200 OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.eql(200);",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "4. Credit Account with 100",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"amount\": 100\n}"
                },
                "url": {
                    "raw": "{{baseUrl}}/api/billing/credit",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "billing",
                        "credit"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Проверяем, что статус ответа 200 OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.eql(200);",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "5. Create Order for 75 and Check Status 'paid'",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"amount\": 75\n}"
                },
                "url": {
                    "raw": "{{baseUrl}}/api/orders",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "orders"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Проверяем, что статус ответа 200 OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.eql(200);",
                            "});",
                            "",
                            "// Проверяем, что в ответе статус заказа равен 'paid'",
                            "var res = {};\ntry { res = pm.response.json(); } catch(e) { res = {}; }",
                            "pm.test(\"Order status is paid\", function () {",
                            "    pm.expect(res).to.have.property('status');",
                            "    pm.expect(res.status).to.eql(\"paid\");",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "6. Check Billing Balance (25)",
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/api/billing/account",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "billing",
                        "account"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Status code is 200', () => pm.response.to.have.status(200));",
                            "let res = pm.response.json();",
                            "pm.test('Balance after paying 75 should be 25', () => pm.expect(res.balance).to.eql(25));",
                            "pm.environment.set('balance', res.balance);"
                        ]
                    }
                }
            ]
        },
        {
            "name": "7. Create Order for 100",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"amount\": 100\n}"
                },
                "url": {
                    "raw": "{{baseUrl}}/api/orders",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "orders"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Проверяем, что статус ответа 200 OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.eql(200);",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "8. Get Billing Account and Assert Balance Unchanged",
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/api/billing/account",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "billing",
                        "account"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Проверяем, что статус ответа 200 OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.eql(200);",
                            "});",
                            "",
                            "// Получаем баланс из ответа и сравниваем с сохранённым",
                            "var res = {};\ntry { res = pm.response.json(); } catch(e) { res = {}; }",
                            "var balance = pm.environment.get(\"balance\");",
                            "pm.test(\"Balance remains unchanged\", function () {",
                            "    pm.expect(Number(res.balance)).to.eql(Number(balance));",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "9. Get Notifications (Expect 2 notifications)",
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/api/notifications?user_id={{user1_id}}",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "api",
                        "notifications"
                    ],
                    "query": [
                        {
                            "key": "user_id",
                            "value": "{{user1_id}}"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Проверяем, что статус ответа 200 OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.eql(200);",
                            "});",
                            "",
                            "// Проверяем, что в ответе ровно 2 уведомления",
                            "var res = {};\ntry { res = pm.response.json(); } catch(e) { res = []; }",
                            "pm.test(\"Notifications count is 2\", function () {",
                            "    pm.expect(res.length).to.eql(2);",
                            "});"
                        ]
                    }
                }
            ]
        }
    ]
}